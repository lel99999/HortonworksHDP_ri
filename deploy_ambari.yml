---
- hosts: ambari
  vars:
    download_url: http://download.oracle.com/otn-pub/java/jdk/8u151-b12/e758a0de34e24606bca991d704f6dcbf/jdk-8u151-linux-x64.tar.gz
    java_archive: /tmp/jdk-8u151-linux-x64.tar.gz
    java_name: /usr/java/jdk1.8.0_151
  name: install and configure ambari
  tasks:
#   - include_role:
#       name: oracle_java8  
    - name: install libselinux-python
      become: yes
      become_method: sudo
      yum:
        name: libselinux-python
        state: present

    - name: install ambari
      become: yes
      become_method: sudo
      command:  yum -y install ambari-server

    - name: run ambari-server setup
      become: yes
      become_method: sudo
      shell: echo -e "y\nn\n1\ny\nn\nn\n" | ambari-server setup
#     command: echo -e "y\nn\n1\ny\nn\nn\n" | ambari-server setup
      register: ambari_setup

    - debug: var=ambari_setup.stdout_lines

    - name: start ambari
      become: yes
      become_method: sudo
      shell: ambari-server start
      ignore_errors: true
      register: ambari_start

    - debug: var=ambari_start.stdout_lines

    - name: generate ssh keys
      become: yes
      become_method: sudo
      command: ssh-keygen -f ~/.ssh/id_rsa -t rsa -N ''
      register: ssh_keygen

    - debug: var=ssh_keygen.stdout_lines

    - name: copy sshpass and unzip
      become: yes
      become_method: sudo
      copy:
        src: files/{{item}}
        dest: /opt
      with_items:
        - rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm 

    - name: install repoforge
      become: yes
      become_method: sudo
      shell: yum -y localinstall /opt/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm 

    - name: install sshpass
      become: yes
      become_method: sudo
      shell: yum -y install sshpass

    - name: install ntp
      become: yes
      become_method: sudo
      yum:
        name: ntp
        state: present

    - name: start ntp service
      become: yes
      become_method: sudo
      service:
        name: ntpd
        state: restarted

    - name: ensure ntp always started
      become: yes
      become_method: sudo
      command: chkconfig ntpd on

    - name: set to local ntp server
      become: yes
      become_method: sudo
      lineinfile:
        dest: /etc/ntp.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: 'server 0.centos.pool.ntp.org iburst', line: '#server 0.centos.pool.ntp.org iburst' }
        - { regexp: 'server 1.centos.pool.ntp.org iburst', line: '#server 1.centos.pool.ntp.org iburst' }
        - { regexp: 'server 2.centos.pool.ntp.org iburst', line: '#server 2.centos.pool.ntp.org iburst' }
        - { regexp: 'server 3.centos.pool.ntp.org iburst', line: '#server 3.centos.pool.ntp.org iburst' }

    - name: set ambari as ntp server
      become: yes
      become_method: sudo
      lineinfile:
        dest: /etc/ntp.conf
        regexp: '^#server 0.centos.pool.ntp.org iburst'
        insertbefore: '#server 0.centos.pool.ntp.org iburst'
        line: server ambari.hdpdev.com iburst

    - name: stop iptables
      become: yes
      become_method: sudo
      service: 
        name: iptables
        state: stopped

    - name: disable iptables
      become: yes
      become_method: sudo
      shell: chkconfig iptables off

    - name: disable selinux
      become: yes
      become_method: sudo
      lineinfile:
        dest: /etc/sysconfig/selinux
        regexp: '^SELINUX=permissive'
        line: 'SELINUX=disabled'

    - name: addresss localhost issue
      become: yes
      become_method: sudo
      replace:
        dest: /etc/hosts
#       path: /etc/hosts    #Only good for Ansible > 2.3, use dest= for Ansible < 2.3
        regexp: '^127\.0\.0\.1'
        replace: '#127.0.0.1'

    - name: install kerberos client 
      become: yes
      become_method: sudo
      yum:
        name: krb5-workstation
        state: present

#   - name: execute ssh-copy-id to specified hosts
#     become: yes
#     become_method: sudo
#     shell: sshpass -f /tmp/.pwd1 root@{{ item }}
#     with_items:
#       - groups[namenodes]
#       - groups[secondarynamenode]
#       - groups[datanodes]
#     register: sshr_copy_id
#   - debug: var=ssh_copy_id.stdout_lines

#   - debug: msg="{{ ambari_setup.stdout }}"
#   - debug: msg="{{ ambari_setup.stderr }}"
